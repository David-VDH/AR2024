//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/TouchInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInputs"",
    ""maps"": [
        {
            ""name"": ""ARTouch"",
            ""id"": ""6115ec32-c577-4602-a1ef-97017defcd7f"",
            ""actions"": [
                {
                    ""name"": ""SingleTap"",
                    ""type"": ""Button"",
                    ""id"": ""a9b329d9-c699-4b75-a3e4-bec8557b74e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2efe9e6f-310e-4219-b490-3cdbaed210be"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTap"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""51d60f44-91c4-4f6c-9c54-7c4199c00668"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""42718e21-321e-4db3-9188-87dd72d48e41"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ARTouch
        m_ARTouch = asset.FindActionMap("ARTouch", throwIfNotFound: true);
        m_ARTouch_SingleTap = m_ARTouch.FindAction("SingleTap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ARTouch
    private readonly InputActionMap m_ARTouch;
    private List<IARTouchActions> m_ARTouchActionsCallbackInterfaces = new List<IARTouchActions>();
    private readonly InputAction m_ARTouch_SingleTap;
    public struct ARTouchActions
    {
        private @TouchInputs m_Wrapper;
        public ARTouchActions(@TouchInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SingleTap => m_Wrapper.m_ARTouch_SingleTap;
        public InputActionMap Get() { return m_Wrapper.m_ARTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARTouchActions set) { return set.Get(); }
        public void AddCallbacks(IARTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_ARTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARTouchActionsCallbackInterfaces.Add(instance);
            @SingleTap.started += instance.OnSingleTap;
            @SingleTap.performed += instance.OnSingleTap;
            @SingleTap.canceled += instance.OnSingleTap;
        }

        private void UnregisterCallbacks(IARTouchActions instance)
        {
            @SingleTap.started -= instance.OnSingleTap;
            @SingleTap.performed -= instance.OnSingleTap;
            @SingleTap.canceled -= instance.OnSingleTap;
        }

        public void RemoveCallbacks(IARTouchActions instance)
        {
            if (m_Wrapper.m_ARTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_ARTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARTouchActions @ARTouch => new ARTouchActions(this);
    public interface IARTouchActions
    {
        void OnSingleTap(InputAction.CallbackContext context);
    }
}
